import {
  require_react
} from "./chunk-4UQS7KPA.js";
import {
  Kx,
  Yx,
  qx
} from "./chunk-IYUYI257.js";
import {
  __toESM
} from "./chunk-2GTGKKMZ.js";

// node_modules/@pqina/react-pintura/PinturaEditor.js
var import_react = __toESM(require_react());

// node_modules/@pqina/react-pintura/events.js
var isEvent = (key) => /^on[A-Z]/.test(key);
var getEventsFromProps = (props) => Object.keys(props).filter(isEvent).map(getEventFromKey);
var getEventFromKey = (key) => key.substr(2).toLowerCase();
var unsub = (component, events = void 0) => {
  (component.unsubs || []).filter(([event]) => !events || events.includes(event)).forEach(([, unsub2]) => unsub2());
};
var sub = (component, props) => {
  unsub(component, getEventsFromProps(props));
  component.unsubs = Object.keys(props).filter(isEvent).map((key) => {
    const type = getEventFromKey(key);
    return [type, component.editor.on(type, props[key])];
  });
};

// node_modules/@pqina/react-pintura/PinturaEditor.js
var PinturaEditor = class extends import_react.default.Component {
  constructor(props) {
    super(props);
    this.elementRef = import_react.default.createRef();
    this.editor = void 0;
  }
  componentDidMount() {
    if (!this.elementRef.current)
      return;
    const props = { ...this.props };
    this.editor = Yx(this.elementRef.current, props);
    sub(this, props);
  }
  componentDidUpdate() {
    const props = { ...this.props };
    Object.assign(this.editor, props);
    sub(this, props);
  }
  componentWillUnmount() {
    if (!this.editor)
      return;
    unsub(this);
    this.editor.destroy();
    this.editor = void 0;
  }
  render() {
    return import_react.default.createElement("div", {
      className: `PinturaRootWrapper ${this.props.className ? this.props.className : ""}`.trim(),
      ref: this.elementRef
    });
  }
};
var PinturaEditor_default = PinturaEditor;

// node_modules/@pqina/react-pintura/PinturaEditorModal.js
var import_react2 = __toESM(require_react());
var PinturaEditorModal = class extends import_react2.default.Component {
  constructor(props) {
    super(props);
    this.editor = void 0;
  }
  componentDidMount() {
    this.el = document.createElement("div");
    if (this.props.className)
      this.el.className = this.props.className;
    document.body.append(this.el);
    const props = { ...this.props };
    this.editor = qx({ ...props, enableAutoDestroy: false }, this.el);
    sub(this, props);
  }
  componentDidUpdate() {
    const props = { ...this.props };
    Object.assign(this.editor, props);
    sub(this, props);
  }
  componentWillUnmount() {
    if (!this.editor)
      return;
    unsub(this);
    this.editor.destroy();
    this.editor = void 0;
    this.el.remove();
  }
  show() {
    this.editor.show();
  }
  hide() {
    this.editor.hide();
  }
  render() {
    return null;
  }
};
var PinturaEditorModal_default = PinturaEditorModal;

// node_modules/@pqina/react-pintura/PinturaEditorOverlay.js
var import_react3 = __toESM(require_react());
var PinturaEditorOverlay = class extends import_react3.default.Component {
  constructor(props) {
    super(props);
    this.elementRef = import_react3.default.createRef();
    this.editor = void 0;
  }
  componentDidMount() {
    if (!this.elementRef.current)
      return;
    const props = { ...this.props };
    this.editor = Kx(this.elementRef.current, props);
    sub(this, props);
  }
  componentDidUpdate() {
    const props = { ...this.props };
    Object.assign(this.editor, props);
    sub(this, props);
  }
  componentWillUnmount() {
    if (!this.editor)
      return;
    unsub(this);
    this.editor.destroy();
    this.editor = void 0;
  }
  render() {
    return import_react3.default.createElement("div", {
      className: `PinturaRootWrapper ${this.props.className ? this.props.className : ""}`.trim(),
      ref: this.elementRef
    });
  }
};
var PinturaEditorOverlay_default = PinturaEditorOverlay;
export {
  PinturaEditor_default as PinturaEditor,
  PinturaEditorModal_default as PinturaEditorModal,
  PinturaEditorOverlay_default as PinturaEditorOverlay
};
//# sourceMappingURL=@pqina_react-pintura.js.map
